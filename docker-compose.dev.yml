version: '3.8'

services:
  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: ecodeli-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ecodeli_root_password
      MYSQL_DATABASE: ecodeli
      MYSQL_USER: ecodeli_user
      MYSQL_PASSWORD: ecodeli_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./bdd.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # API Backend avec volumes montés pour le développement
  api:
    image: node:18-alpine
    container_name: ecodeli-api
    working_dir: /app
    command: npm run dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=mysql
      - DB_USER=ecodeli_user
      - DB_PASSWORD=ecodeli_password
      - DB_NAME=ecodeli
      - DB_PORT=3306
      - JWT_SECRET=your_very_long_and_secure_jwt_secret_key_here
      - JWT_EXPIRES_IN=24h
      - SESSION_SECRET=your_very_long_and_secure_session_secret_key_here
      - PORT=3000
    volumes:
      # Monte tout le dossier API pour que les changements soient immédiats
      - ./api:/app
      - /app/node_modules  # Exclut node_modules pour éviter les conflits
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ecodeli-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/test-db"]
      timeout: 10s
      retries: 5

  # Frontend en mode développement
  frontend:
    image: node:18-alpine
    container_name: ecodeli-frontend
    working_dir: /app
    command: npm run dev -- --host
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      # Monte tout le dossier frontend pour que les changements soient immédiats
      - ./frontend:/app
      - /app/node_modules  # Exclut node_modules pour éviter les conflits
    depends_on:
      api:
        condition: service_healthy
    networks:
      - ecodeli-network

  # Admin en mode développement
  admin:
    image: node:18-alpine
    container_name: ecodeli-admin
    working_dir: /app
    command: npm run dev -- --host
    restart: unless-stopped
    ports:
      - "5174:5174"
    volumes:
      # Monte tout le dossier backend pour que les changements soient immédiats
      - ./backend:/app
      - /app/node_modules  # Exclut node_modules pour éviter les conflits
    depends_on:
      api:
        condition: service_healthy
    networks:
      - ecodeli-network

volumes:
  mysql_data:
    driver: local

networks:
  ecodeli-network:
    driver: bridge